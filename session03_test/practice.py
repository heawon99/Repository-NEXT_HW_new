   
#문자형은 어떻게 다루는지가 중요하다.
#문자형 인덱싱 슬라이싱 
#문자열을 다루는 방법 
#어떻게 문자열을 효과적으로 다루지? 
# 인덱스는 문자에 붙여진 순서
# 0부터 시작한다. 철수야 안녕 012 34
# 인덱스가 음수라면? -1은 맨끝에서 붙여진 문자 
# 슬라이싱 : '여러개의'문자에 범위로 접근하는 방법
# 리스트 (튜플), 딕셔너리 
#리스트 자료형 
#리스트 : 변할수도 있는 데이터 
#튜플: 변할 수 없는 데이터를 나란히 묶어주는 자료형 
#가장 중요한건 딕셔너리(해쉬)
#딕셔너리 : 우리는 key를 통해 value를 얻는다.
# 문자열 (내장함수)
#str = "이든아"
#str2 = "이든아 넌 나에게 모욕감을 줬어"

#print(str2[0:3])

#슬라이싱은 [x:y] x번째 인덱스부터 y 인덱스 전까지
#문자열 길이를 구해주는 : len(문자열변수) 길이는 1부터 세

#print(len(str2))
#문자열 내에서 특정문자 등장 횟수:문자열 변수 .count('특정문자')

#print(str2.count('이'))

#문자열을 (특정기준으로)나누기 : 문자열 변수 .split()
#print(str2.split('나에게')) #공백을 기준으로 나누겠다.

#특정문자 인덱스 찾기 : find('문자') , index('문자')

#print(str2.index('이'))
#그럼 인덱스랑 파인드는 똑같은거 아님? 
#찾고자 하는 문자가 없을때 차이가 없을때 

#리스트 (내장함수)

#li = [3, 1,'정이든', 4,'바보', 5, 1]

#인덱싱 슬라이싱
#print(li[0:2])
#리스트의 길이를 구해주는거 : len(변수)
#print(len(li))
#리스트 원소 오름차순으로 정렬해주는 함수 :sort()
#print(li)


#li.sort()

#print(li)

#리스트내의 특정 원소 인덱스를 반황해주는 함수 : .index()

#print(li.index("정이든"))

#리스트내의 특정 원소의 갯수 세기 : .count(요소)

#딕셔너리 (내장함수)


#airs = {'잔나비' :'뜨거운감자', '트와이스':'룰루랄라','뭉크':'절규'}

#하나의 키 -value 쌍을 추가하는 방법 

# 딕셔너리형 변수[키] = value
#print(pairs)

#pairs['스탠딩에그']='맛있겠다'

#print(pairs)

#하나의 키 value를 삭제하는 방법 = del 함수 
# del 변수[키]

#del pairs['스탠딩에그']

#print(pairs)

#key로 value를 얻는 : 변수.get(키)

#v = pairs.get('뭉크')
#print(v)

#제어문
#뭘제어해? 
#코드의 흐름을 제어한다!
#분기문 (=if문)
#컴퓨터에게 선택의 여지와 조건을 부여 
##85점 이상으면 pass , fail 

#score = int(input("점수를 입력해주세요: " ))

#if(score>=85):
 #print("pass")
#else:
# print("fail")

#activity = input("너동아리 머행? :")

#if(activity=="멋쟁이사자처럼"):
   # print("맞아?")
#else:
   # print("응 잘가")

money = int(input("돈 얼마있냐?"))

if(money>=5000):
    print("아웃백")
else:
    if(money>=3000):
       print("학식")
    else:
        if(money>=1000):
            print("컵라면")
        else:
         print("공기밥")



 
